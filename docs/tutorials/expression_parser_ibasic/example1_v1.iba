/*
Recursive expression parser, Example 1.
Written with IBasic Professional
By Jos de Jong, may 2006

Supports expressions with additions
*/
AUTODEFINE "Off"

OPENCONSOLE

PRINT "2 + 3 = ", Eval("2 + 3")
PRINT "2 + 3 + 4 + 5 = ", Eval("2 + 3 + 4 + 5")
PRINT "2.5 + 3.25 = ", Eval("2.5 + 3.25")

PRINT ""
PRINT "Press any key to quit"
DO :UNTIL INKEY$<>""
CLOSECONSOLE
END

'_____________________________________________
SUB Eval(Expression:STRING), DOUBLE
DEF Ans:DOUBLE
DEF pos:INT
DEF expr:STRING
DEF part1, part2:STRING

	'remove spaces at start and end of the expression
	expr = LTRIM$(RTRIM$(Expression))

	'search for an operator
	pos = INSTR(expr, "+")
	IF pos
		'there is an operator found at position pos.
		'split up the expression in two parts and calculate the result
		'of that two parts. Then calculate the result for the complete expression
		part1 = LEFT$(expr, pos-1)
		part2 = RIGHT$(expr, LEN(expr)-pos)
		Ans = Eval(part1) + Eval(part2)
	ELSE
		'there are no more operators left in the expression.
		'so the expression must be a value
		Ans = VAL(expr)
	ENDIF

	'return the answer of the expression
	RETURN Ans
ENDSUB
